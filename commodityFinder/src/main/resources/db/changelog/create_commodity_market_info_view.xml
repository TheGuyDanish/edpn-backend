<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="create_commodity_market_info_view" author="pveeckhout">
        <createView viewName="commodity_market_info_view" replaceIfExists="true">
            <![CDATA[
            WITH
                mean_prices AS (
                    SELECT
                        commodity_id,
                        MIN(sell_price) AS min_sell_price,
                        MAX(buy_price) AS max_buy_price
                    FROM market_datum
                    GROUP BY commodity_id),
                average_mean_prices AS (
                     SELECT
                         commodity_id,
                         AVG(mean_price) as avg_mean_price
                     FROM market_datum
                     GROUP BY commodity_id),
                stations_with_prices AS (
                     SELECT
                        mp.commodity_id,
                        md.station_id,
                        s.system_id,
                        md.buy_price,
                        md.sell_price,
                        sys.x_coordinate,
                        sys.y_coordinate,
                        sys.z_coordinate,
                        ROW_NUMBER() OVER (
                            PARTITION BY mp.commodity_id, md.sell_price
                            ORDER BY
                                POWER(sys.x_coordinate, 2) + POWER(sys.y_coordinate, 2) + POWER(sys.z_coordinate, 2)
                        ) as rn_sell,
                        ROW_NUMBER() OVER (
                            PARTITION BY mp.commodity_id, md.buy_price
                            ORDER BY
                                POWER(sys.x_coordinate, 2) + POWER(sys.y_coordinate, 2) + POWER(sys.z_coordinate, 2)
                        ) as rn_buy
                     FROM market_datum md
                             JOIN mean_prices mp ON mp.commodity_id = md.commodity_id
                             JOIN station s ON md.station_id = s.id
                             JOIN system sys ON s.system_id = sys.id
                     WHERE md.sell_price = mp.min_sell_price OR md.buy_price = mp.max_buy_price),
                 min_max_stations AS (
                     SELECT
                         commodity_id,
                         station_id AS lowest_selling_station,
                         NULL AS highest_buying_station
                     FROM stations_with_prices
                     WHERE rn_sell = 1
                     UNION ALL
                     SELECT
                         commodity_id,
                         NULL AS lowest_selling_station,
                         station_id AS highest_buying_station
                     FROM stations_with_prices
                     WHERE rn_buy = 1 ),
                 buy_sell_counts AS (
                     SELECT
                         md.commodity_id,
                         COUNT(DISTINCT CASE WHEN md.buy_price IS NOT NULL AND md.buy_price != 0 THEN md.station_id END) AS stations_with_buy_price,
                         COUNT(DISTINCT CASE WHEN md.sell_price IS NOT NULL AND md.sell_price != 0 THEN md.station_id END) AS stations_with_sell_price,
                         COUNT(DISTINCT CASE WHEN md.buy_price > amp.avg_mean_price THEN md.station_id END) AS stations_with_buy_price_higher_than_average,
                         COUNT(DISTINCT CASE WHEN md.sell_price < amp.avg_mean_price THEN md.station_id END) AS stations_with_sell_price_lower_than_average
                     FROM market_datum md
                             JOIN average_mean_prices amp ON amp.commodity_id = md.commodity_id
                     GROUP BY md.commodity_id)
            SELECT
                md.commodity_id,
                MAX(md.buy_price) AS maxBuyPrice,
                MIN(md.buy_price) AS minBuyPrice,
                AVG(md.buy_price) AS avgBuyPrice,
                MAX(md.sell_price) AS maxSellPrice,
                MIN(md.sell_price) AS minSellPrice,
                AVG(md.sell_price) AS avgSellPrice,
                MIN(md.mean_price) AS minMeanPrice,
                MAX(md.mean_price) AS maxMeanPrice,
                AVG(md.mean_price) AS averageMeanPrice,
                SUM(md.stock) AS totalStock,
                SUM(md.demand) AS totalDemand,
                COUNT(DISTINCT md.station_id) AS totalStations,
                bsc.stations_with_buy_price,
                bsc.stations_with_sell_price,
                bsc.stations_with_buy_price_higher_than_average,
                bsc.stations_with_sell_price_lower_than_average,
                MAX((CASE WHEN mms.lowest_selling_station IS NOT NULL THEN mms.lowest_selling_station END)::text) AS lowest_selling_station,
                MAX((CASE WHEN mms.highest_buying_station IS NOT NULL THEN mms.highest_buying_station END)::text) AS highest_buying_station
            FROM market_datum md
                    LEFT JOIN buy_sell_counts bsc ON md.commodity_id = bsc.commodity_id
                    LEFT JOIN min_max_stations mms ON md.commodity_id = mms.commodity_id
            GROUP BY
                md.commodity_id,
                bsc.stations_with_buy_price,
                bsc.stations_with_sell_price,
                bsc.stations_with_buy_price_higher_than_average,
                bsc.stations_with_sell_price_lower_than_average;
            ]]>
        </createView>
    </changeSet>

</databaseChangeLog>
