name: Docker Build

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  validation:
    name: "Validate, build and test"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Validate maven wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Execute Gradle build
        run: ./gradlew build test
      - name: Upload test reports
        run: |
          find . -type f -path "*/build/reports/tests/test/*.html" -exec bash -c 'module_dir=$(dirname "$1"); module_name=${module_dir##*/}; test_report_name=${1##*/}; mv "$1" "${module_dir}/${module_name}-${test_report_name}"' bash {} \;
          find . -type f -path "*/build/reports/tests/test/*.html" -exec bash -c 'module_dir=$(dirname "$1"); module_name=${module_dir##*/}; test_report_name=${1##*/}; echo "::set-output name=test_reports::${module_dir}/${module_name}-${test_report_name}"' bash {} \;
      - name: Publish test reports
        uses: actions/upload-artifact@v2
        with:
          name: Test Reports
          path: ${{ steps.publish_test_reports.outputs.test_reports }}

  docker:
    needs: validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get version from build.gradle
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == 'pull_request' ]]; then
            echo "VERSION=$(grep -oP "version\s*=\s*'\K[^']+" build.gradle)-${{ github.event.pull_request.number || github.event.issue.number }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(grep -oP "version\s*=\s*'\K[^']+" build.gradle)" >> $GITHUB_ENV
          fi
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Execute Gradle bootBuildImage
        run: ./gradlew bootBuildImage --imageName=nexus.edpn.io/edpn/backend/modulith:${{ env.VERSION }}
      - name: Build Docker image with wget
        run: docker build --build-arg BASE_IMAGE=nexus.edpn.io/edpn/backend/modulith:${{ env.VERSION }} -f Dockerfile-add-packages -t nexus.edpn.io/edpn/backend/modulith:${{ env.VERSION }} .
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.NEXUS_USER }}
          password: ${{ secrets.NEXUS_PASSWORD }}
          registry: nexus.edpn.io
      - name: Push Docker image to Nexus registry
        run: docker push nexus.edpn.io/edpn/backend/modulith:${{ env.VERSION }}
      - name: Add additional tags to Docker image
        if: github.event_name != 'pull_request'
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/development' ]]; then
            docker tag nexus.edpn.io/edpn/backend/modulith:${{ env.VERSION }} nexus.edpn.io/edpn/backend/modulith:latest-snapshot
            docker push nexus.edpn.io/edpn/backend/modulith:latest-snapshot
          elif [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            docker tag nexus.edpn.io/edpn/backend/modulith:${{ env.VERSION }} nexus.edpn.io/edpn/backend/modulith:latest
            docker push nexus.edpn.io/edpn/backend/modulith:latest
          fi
